# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: nuget/setup-nuget@v1
      with:
        nuget-api-key: ${{ secrets.NuGetAPIKey }}
        nuget-version: '5.x'
    - run: nuget restore KlippaOCRAPI.sln

    - name: Check if Git tag exists
      run: echo "::set-env name=HEAD_TAG::$(git tag --points-at HEAD)"

    - name: Build Project
      run: |
        cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\"
        .\MSBuild.exe $Env:GITHUB_WORKSPACE\KlippaOCRAPI /t:Build /p:Configuration=Release

    - name: Build NuGet
      if: env.HEAD_TAG == '' 
      run: |
        cd $Env:GITHUB_WORKSPACE
        nuget pack KlippaOCRAPI.nuspec
        echo "::set-env name=NUGET_FILE::$(ls | grep Klippa.OCRAPI.Activities.*.nupkg)"
        
    - name: Build and push NuGet
      if: env.HEAD_TAG != '' 
      run: |
        cd $Env:GITHUB_WORKSPACE
        nuget pack KlippaOCRAPI.nuspec -Version $Env:HEAD_TAG
        nuget push *.nupkg -source https://www.nuget.org/
        dotnet nuget push *.nupkg --source "github"
        
    - name: Create Release
      id: create_release
      if: env.HEAD_TAG != '' 
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: Release of ${{ github.ref }}
        draft: false
        prerelease: false
          
    - name: Upload Release Asset
      id: upload-release-asset 
      if: env.HEAD_TAG != '' 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./$Env:NUGET_FILE
        asset_name: $Env:NUGET_FILE
        asset_content_type: application/zip
          
    - uses: actions/upload-artifact@v2
      with:
        name: nuget-package
        path: Klippa.OCRAPI.Activities.*.nupkg
